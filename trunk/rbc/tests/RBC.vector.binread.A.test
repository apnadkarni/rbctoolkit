# RBC.vector.binread.A.test --
#
###Abstract
# This file tests the binread function of the vector rbc component.
# binread is an instance function of vector.
#
###Copyright
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
###Revision String
# SVN: $Id$

###Package Definition
package provide vector.binread

package require rbc
namespace import rbc::*

package require tcltest
namespace import tcltest::*
#namespace eval vector.binread {

	# ------------------------------------------------------------------------------------
	#  Test Constraints
	#  Some machines treat floating point numbers differently, so we set some
	#  constraints here for various vector related routines
	# ------------------------------------------------------------------------------------
	tcltest::testConstraint twoDigitExponent   [expr {[format %1.0e 1e-20] eq "1e-20"}]
	tcltest::testConstraint threeDigitExponent [expr {[format %1.0e 1e-20] eq "1e-020"}]

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command reads the entire contents of a file when 
# given no length parameter 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.1.1 {
    vector binread entire file
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 4.67887034632e+163}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command reads length number of items from the 
# channel 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.1.2 {
    vector binread length items
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel 1
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command reads the entire contents of a file in 
# the default endianess of the host machine 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.2.1 {
    vector binread default endianess
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 4.67887034632e+163}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command reads the entire contents of a file in 
# the opposite endianess of the host machine 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.2.2 {
    vector binread opposite endianess
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -swap
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 2.96444328161e-319}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command reads the entire contents of a file into 
# the vector starting at index# Purpose: 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.3.1 {
    vector binread at index
} -setup {
    vector create Vector1
    Vector1 set {1 2}
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -at 1
    expr {$Vector1(1:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 4.67887034632e+163}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command leaves all items preceding index 
# unchanged 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.3.2 {
    vector binread at index
} -setup {
    vector create Vector1
    Vector1 set {1 2}    
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -at 1
    expr {$Vector1(0)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {1.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the i1 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.1 {
    vector binread format i1
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format i1
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -22.0 97.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the i2 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.2 {
    vector binread format i2
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format i2
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 0.0 0.0 0.0 0.0 25066.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the i4 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.3 {
    vector binread format i4
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format i4
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 1642725376.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the u1 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.4 {
    vector binread format u1
} -setup {
    vector create Vector1
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format u1
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 234.0 97.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the u2 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.5 {
    vector binread format u2
} -setup {
    vector create Vector1 
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format u2
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 0.0 0.0 0.0 0.0 25066.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the u4 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.6 {
    vector binread format u4
} -setup {
    vector create Vector1 
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format u4
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 1642725376.0}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the r4 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.7-00 {
    vector binread format r4
} -constraints twoDigitExponent -setup {
    vector create Vector1   
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format r4
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 5.39567264156e+20}

test RBC.vector.binread.A.4.7-000 {
    vector binread format r4
} -constraints threeDigitExponent -setup {
    vector create Vector1   
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format r4
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 0.0 0.0 5.39567264156e+020}

# ------------------------------------------------------------------------------------
# Purpose: Ensure the vector binread command can read the r8 format 
# ------------------------------------------------------------------------------------ 
test RBC.vector.binread.A.4.8 {
    vector binread format r8
} -setup {
    vector create Vector1  
    set Channel [open [file join [file dirname [info script]] binReadTestFile.txt] r]
} -body {
    Vector1 binread $Channel -format r8
    expr {$Vector1(:)}
} -cleanup {
    vector destroy Vector1
    close $Channel
    unset Channel
} -result {0.0 4.67887034632e+163}


cleanupTests
#}
