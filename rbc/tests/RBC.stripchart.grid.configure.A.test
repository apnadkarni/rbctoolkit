# RBC.stripchart.grid.configure.A.test --
#
###Abstract
# This file contains the automatic tests that test the grid configure 
# function of the stripchart BLT component.
#
###Copyright
# See the file "license.terms" for information on usage and
# redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
###Revision String
# SVN: $Id$

###Package Definition
package provide stripchart.grid

package require rbc
namespace import rbc::*

package require tcltest
namespace import tcltest::*
namespace eval stripchart.grid {
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -color command works correctly when given a valid
	# color name.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.1.1 {
		stripchart grid: configure - color - valid color name
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -color black
		.stripchart1 grid cget -color
	} -cleanup {
		destroy .stripchart1
	} -result {black}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -color command works correctly when given an
	# invalid color name.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.1.2 {
		stripchart grid: configure - color - invalid color name
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -color invalid}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -dashes command works correctly when given a
	# valid dash list.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.2.1 {
		stripchart grid: configure - dashes - valid dash list
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -dashes {2 3 2 4}
		.stripchart1 grid cget -dashes
	} -cleanup {
		destroy .stripchart1
	} -result {2 3 2 4}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -dashes command works correctly when given an
	# empty dash list.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.2.2 {
		stripchart grid: configure - dashes - empty dash list
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -dashes ""
		.stripchart1 grid cget -dashes
	} -cleanup {
		destroy .stripchart1
	} -result {}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -dashes command works correctly when given a dash
	# list that is too long.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.2.3 {
		stripchart grid: configure - dashes - long dash list
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -dashes {2 3 2 4 2 3 2 4 2 3 2 4}}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -dashes command works correctly when given an
	# invalid numerical dash list.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.2.4 {
		stripchart grid: configure - dashes - invalid numerical dash list
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -dashes {2 3 2 -1 2}}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -dashes command works correctly when given a dash
	# list with characters.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.2.5 {
		stripchart grid: configure - dashes - dash list with characters
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -dashes {2 3 2 a 2}}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}

	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given 1.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.1 {
		stripchart grid: configure - hide - 1
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide 1
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given 0.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.2 {
		stripchart grid: configure - hide - 0
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide 0
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given true.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.3 {
		stripchart grid: configure - hide - true
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide true
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given false.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.4 {
		stripchart grid: configure - hide - false
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide false
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given yes.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.5 {
		stripchart grid: configure - hide - yes
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide yes
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given no.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.6 {
		stripchart grid: configure - hide - no
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -hide no
		.stripchart1 grid cget -hide
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -hide command works correctly when given an 
	# invalid input value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.3.7 {
		stripchart grid: configure - hide - invalid input
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -hide invalid}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}

	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given an
	# integer value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.1 {
		stripchart grid: configure - linewidth - valid integer input
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -linewidth 2
		.stripchart1 grid cget -linewidth
	} -cleanup {
		destroy .stripchart1
	} -result {2}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given an
	# invalid integer value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.2 {
		stripchart grid: configure - linewidth - invalid integer input
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -linewidth -2}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given a
	# decimal value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.3 {
		stripchart grid: configure - linewidth - valid decimal input
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -linewidth 3.5
		.stripchart1 grid cget -linewidth
	} -cleanup {
		destroy .stripchart1
	} -result {4}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given an
	# invalid decimal value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.4 {
		stripchart grid: configure - linewidth - invalid decimal input
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -linewidth -2.5}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given
	# character input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.5 {
		stripchart grid: configure - linewidth - character input
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -linewidth a}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -linewidth command works correctly when given 0
	# as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.4.6 {
		stripchart grid: configure - linewidth - 0
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -linewidth 0
		.stripchart1 grid cget -linewidth
	} -cleanup {
		destroy .stripchart1
	} -result {0}

	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapx command works correctly when given valid 
	# axis name as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.5.1 {
		stripchart grid: configure - mapx - valid axis name
	} -setup {
		stripchart .stripchart1
		.stripchart1 axis create .axis1
	} -body {
		.stripchart1 grid configure -mapx .axis1
		.stripchart1 grid cget -mapx
	} -cleanup {
		.stripchart1 axis delete .axis1
		destroy .stripchart1
	} -result {.axis1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapx command works correctly when given a non-
	# existent axis name as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.5.2 {
		stripchart grid: configure - mapx - non-existent axis name
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -mapx .axis1}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapx command works correctly when given the 
	# empty string as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.5.3 {
		stripchart grid: configure - mapx - empty string
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -mapx ""
		.stripchart1 grid cget -mapx
	} -cleanup {
		destroy .stripchart1
	} -result {}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapx command works correctly when not input is 
	# given.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.5.4 {
		stripchart grid: configure - mapx - no input
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -mapx
		.stripchart1 grid cget -mapx
	} -cleanup {
		destroy .stripchart1
	} -result {x}

	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapy command works correctly when given valid 
	# axis name as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.6.1 {
		stripchart grid: configure - mapy - valid axis name
	} -setup {
		stripchart .stripchart1
		.stripchart1 axis create .axis1
	} -body {
		.stripchart1 grid configure -mapy .axis1
		.stripchart1 grid cget -mapy
	} -cleanup {
		.stripchart1 axis delete .axis1
		destroy .stripchart1
	} -result {.axis1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapy command works correctly when given a non-
	# existent axis name as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.6.2 {
		stripchart grid: configure - mapy - non-existent axis name
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -mapy .axis1}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapy command works correctly when given the 
	# empty string as input.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.6.3 {
		stripchart grid: configure - mapy - empty string
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -mapy ""
		.stripchart1 grid cget -mapy
	} -cleanup {
		destroy .stripchart1
	} -result {}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -mapy command works correctly when not input is 
	# given.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.6.4 {
		stripchart grid: configure - mapy - no input
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -mapy
		.stripchart1 grid cget -mapy
	} -cleanup {
		destroy .stripchart1
	} -result {y}

	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given 1.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.1 {
		stripchart grid: configure - minor - 1
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor 1
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given 0.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.2 {
		stripchart grid: configure - minor - 0
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor 0
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given true.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.3 {
		stripchart grid: configure - minor - true
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor true
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given false.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.4 {
		stripchart grid: configure - minor - false
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor false
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given yes.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.5 {
		stripchart grid: configure - minor - yes
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor yes
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {1}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given no.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.6 {
		stripchart grid: configure - minor - no
	} -setup {
		stripchart .stripchart1
	} -body {
		.stripchart1 grid configure -minor no
		.stripchart1 grid cget -minor
	} -cleanup {
		destroy .stripchart1
	} -result {0}
	
	# ------------------------------------------------------------------------------------
	# Purpose: Ensure the grid configure -minor command works correctly when given an 
	# invalid input value.
	# ------------------------------------------------------------------------------------
	test RBC.stripchart.grid.configure.A.7.7 {
		stripchart grid: configure - minor - invalid input
	} -setup {
		stripchart .stripchart1
	} -body {
		if {[catch {.stripchart1 grid configure -minor invalid}]} {
			return 0
		} else {
			return 1
		}
	} -cleanup {
		destroy .stripchart1
	} -result {0}

	cleanupTests
}